/*
 * Copyright 2010-2013 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.lang.evaluate

import java.math.BigInteger

/** This file is generated by org.jetbrains.jet.generators.evaluate:generate(). DO NOT MODIFY MANUALLY */

val emptyFun: Function2<BigInteger, BigInteger, BigInteger> = { a, b -> BigInteger("0") }

private val unaryOperations = hashMapOf<UnaryOperationKey<*>, (Any?) -> Any>(
    unaryOperationKey(BOOLEAN, "not", { a -> a.not() }),     
    unaryOperationKey(BYTE, "toInt", { a -> a.toInt() }),     
    unaryOperationKey(BYTE, "minus", { a -> a.minus() }),     
    unaryOperationKey(BYTE, "toChar", { a -> a.toChar() }),     
    unaryOperationKey(BYTE, "toLong", { a -> a.toLong() }),     
    unaryOperationKey(BYTE, "plus", { a -> a.plus() }),     
    unaryOperationKey(BYTE, "toFloat", { a -> a.toFloat() }),     
    unaryOperationKey(BYTE, "toDouble", { a -> a.toDouble() }),     
    unaryOperationKey(BYTE, "toShort", { a -> a.toShort() }),     
    unaryOperationKey(BYTE, "toByte", { a -> a.toByte() }),     
    unaryOperationKey(CHAR, "toInt", { a -> a.toInt() }),     
    unaryOperationKey(CHAR, "minus", { a -> a.minus() }),     
    unaryOperationKey(CHAR, "toChar", { a -> a.toChar() }),     
    unaryOperationKey(CHAR, "toLong", { a -> a.toLong() }),     
    unaryOperationKey(CHAR, "plus", { a -> a.plus() }),     
    unaryOperationKey(CHAR, "toFloat", { a -> a.toFloat() }),     
    unaryOperationKey(CHAR, "toDouble", { a -> a.toDouble() }),     
    unaryOperationKey(CHAR, "toShort", { a -> a.toShort() }),     
    unaryOperationKey(CHAR, "toByte", { a -> a.toByte() }),     
    unaryOperationKey(DOUBLE, "toInt", { a -> a.toInt() }),     
    unaryOperationKey(DOUBLE, "minus", { a -> a.minus() }),     
    unaryOperationKey(DOUBLE, "toChar", { a -> a.toChar() }),     
    unaryOperationKey(DOUBLE, "toLong", { a -> a.toLong() }),     
    unaryOperationKey(DOUBLE, "plus", { a -> a.plus() }),     
    unaryOperationKey(DOUBLE, "toFloat", { a -> a.toFloat() }),     
    unaryOperationKey(DOUBLE, "toDouble", { a -> a.toDouble() }),     
    unaryOperationKey(DOUBLE, "toShort", { a -> a.toShort() }),     
    unaryOperationKey(DOUBLE, "toByte", { a -> a.toByte() }),     
    unaryOperationKey(FLOAT, "toInt", { a -> a.toInt() }),     
    unaryOperationKey(FLOAT, "minus", { a -> a.minus() }),     
    unaryOperationKey(FLOAT, "toChar", { a -> a.toChar() }),     
    unaryOperationKey(FLOAT, "toLong", { a -> a.toLong() }),     
    unaryOperationKey(FLOAT, "plus", { a -> a.plus() }),     
    unaryOperationKey(FLOAT, "toFloat", { a -> a.toFloat() }),     
    unaryOperationKey(FLOAT, "toDouble", { a -> a.toDouble() }),     
    unaryOperationKey(FLOAT, "toShort", { a -> a.toShort() }),     
    unaryOperationKey(FLOAT, "toByte", { a -> a.toByte() }),     
    unaryOperationKey(INT, "plus", { a -> a.plus() }),     
    unaryOperationKey(INT, "toShort", { a -> a.toShort() }),     
    unaryOperationKey(INT, "toByte", { a -> a.toByte() }),     
    unaryOperationKey(INT, "inv", { a -> a.inv() }),     
    unaryOperationKey(INT, "toInt", { a -> a.toInt() }),     
    unaryOperationKey(INT, "minus", { a -> a.minus() }),     
    unaryOperationKey(INT, "toChar", { a -> a.toChar() }),     
    unaryOperationKey(INT, "toLong", { a -> a.toLong() }),     
    unaryOperationKey(INT, "toDouble", { a -> a.toDouble() }),     
    unaryOperationKey(INT, "toFloat", { a -> a.toFloat() }),     
    unaryOperationKey(LONG, "plus", { a -> a.plus() }),     
    unaryOperationKey(LONG, "toShort", { a -> a.toShort() }),     
    unaryOperationKey(LONG, "toByte", { a -> a.toByte() }),     
    unaryOperationKey(LONG, "inv", { a -> a.inv() }),     
    unaryOperationKey(LONG, "toInt", { a -> a.toInt() }),     
    unaryOperationKey(LONG, "minus", { a -> a.minus() }),     
    unaryOperationKey(LONG, "toChar", { a -> a.toChar() }),     
    unaryOperationKey(LONG, "toLong", { a -> a.toLong() }),     
    unaryOperationKey(LONG, "toDouble", { a -> a.toDouble() }),     
    unaryOperationKey(LONG, "toFloat", { a -> a.toFloat() }),     
    unaryOperationKey(SHORT, "toInt", { a -> a.toInt() }),     
    unaryOperationKey(SHORT, "minus", { a -> a.minus() }),     
    unaryOperationKey(SHORT, "toChar", { a -> a.toChar() }),     
    unaryOperationKey(SHORT, "toLong", { a -> a.toLong() }),     
    unaryOperationKey(SHORT, "plus", { a -> a.plus() }),     
    unaryOperationKey(SHORT, "toFloat", { a -> a.toFloat() }),     
    unaryOperationKey(SHORT, "toDouble", { a -> a.toDouble() }),     
    unaryOperationKey(SHORT, "toShort", { a -> a.toShort() }),     
    unaryOperationKey(SHORT, "toByte", { a -> a.toByte() }),     
    unaryOperationKey(STRING, "toString", { a -> a.toString() })    
)

private val binaryOperations = hashMapOf<BinaryOperationKey<*, *>, Pair<Function2<Any?, Any?, Any>, Function2<BigInteger, BigInteger, BigInteger>>>(
    binaryOperationKey(BOOLEAN, BOOLEAN, "xor", Pair({ a, b -> a.xor(b) }, emptyFun )),     
    binaryOperationKey(BOOLEAN, BOOLEAN, "or", Pair({ a, b -> a.or(b) }, emptyFun )),     
    binaryOperationKey(BOOLEAN, ANY, "equals", Pair({ a, b -> a.equals(b) }, emptyFun )),     
    binaryOperationKey(BOOLEAN, BOOLEAN, "and", Pair({ a, b -> a.and(b) }, emptyFun )),     
    binaryOperationKey(BYTE, BYTE, "minus", Pair({ a, b -> a.minus(b) }, { a, b -> a.subtract(b) } )),     
    binaryOperationKey(BYTE, CHAR, "minus", Pair({ a, b -> a.minus(b) }, emptyFun )),     
    binaryOperationKey(BYTE, DOUBLE, "minus", Pair({ a, b -> a.minus(b) }, emptyFun )),     
    binaryOperationKey(BYTE, FLOAT, "minus", Pair({ a, b -> a.minus(b) }, emptyFun )),     
    binaryOperationKey(BYTE, INT, "minus", Pair({ a, b -> a.minus(b) }, { a, b -> a.subtract(b) } )),     
    binaryOperationKey(BYTE, LONG, "minus", Pair({ a, b -> a.minus(b) }, { a, b -> a.subtract(b) } )),     
    binaryOperationKey(BYTE, SHORT, "minus", Pair({ a, b -> a.minus(b) }, { a, b -> a.subtract(b) } )),     
    binaryOperationKey(BYTE, BYTE, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(BYTE, CHAR, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(BYTE, DOUBLE, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(BYTE, FLOAT, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(BYTE, INT, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(BYTE, LONG, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(BYTE, SHORT, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(BYTE, BYTE, "plus", Pair({ a, b -> a.plus(b) }, { a, b -> a.add(b) } )),     
    binaryOperationKey(BYTE, CHAR, "plus", Pair({ a, b -> a.plus(b) }, emptyFun )),     
    binaryOperationKey(BYTE, DOUBLE, "plus", Pair({ a, b -> a.plus(b) }, emptyFun )),     
    binaryOperationKey(BYTE, FLOAT, "plus", Pair({ a, b -> a.plus(b) }, emptyFun )),     
    binaryOperationKey(BYTE, INT, "plus", Pair({ a, b -> a.plus(b) }, { a, b -> a.add(b) } )),     
    binaryOperationKey(BYTE, LONG, "plus", Pair({ a, b -> a.plus(b) }, { a, b -> a.add(b) } )),     
    binaryOperationKey(BYTE, SHORT, "plus", Pair({ a, b -> a.plus(b) }, { a, b -> a.add(b) } )),     
    binaryOperationKey(BYTE, BYTE, "div", Pair({ a, b -> a.div(b) }, { a, b -> a.divide(b) } )),     
    binaryOperationKey(BYTE, CHAR, "div", Pair({ a, b -> a.div(b) }, emptyFun )),     
    binaryOperationKey(BYTE, DOUBLE, "div", Pair({ a, b -> a.div(b) }, emptyFun )),     
    binaryOperationKey(BYTE, FLOAT, "div", Pair({ a, b -> a.div(b) }, emptyFun )),     
    binaryOperationKey(BYTE, INT, "div", Pair({ a, b -> a.div(b) }, { a, b -> a.divide(b) } )),     
    binaryOperationKey(BYTE, LONG, "div", Pair({ a, b -> a.div(b) }, { a, b -> a.divide(b) } )),     
    binaryOperationKey(BYTE, SHORT, "div", Pair({ a, b -> a.div(b) }, { a, b -> a.divide(b) } )),     
    binaryOperationKey(BYTE, BYTE, "mod", Pair({ a, b -> a.mod(b) }, { a, b -> a.mod(b) } )),     
    binaryOperationKey(BYTE, CHAR, "mod", Pair({ a, b -> a.mod(b) }, emptyFun )),     
    binaryOperationKey(BYTE, DOUBLE, "mod", Pair({ a, b -> a.mod(b) }, emptyFun )),     
    binaryOperationKey(BYTE, FLOAT, "mod", Pair({ a, b -> a.mod(b) }, emptyFun )),     
    binaryOperationKey(BYTE, INT, "mod", Pair({ a, b -> a.mod(b) }, { a, b -> a.mod(b) } )),     
    binaryOperationKey(BYTE, LONG, "mod", Pair({ a, b -> a.mod(b) }, { a, b -> a.mod(b) } )),     
    binaryOperationKey(BYTE, SHORT, "mod", Pair({ a, b -> a.mod(b) }, { a, b -> a.mod(b) } )),     
    binaryOperationKey(BYTE, BYTE, "times", Pair({ a, b -> a.times(b) }, { a, b -> a.multiply(b) } )),     
    binaryOperationKey(BYTE, CHAR, "times", Pair({ a, b -> a.times(b) }, emptyFun )),     
    binaryOperationKey(BYTE, DOUBLE, "times", Pair({ a, b -> a.times(b) }, emptyFun )),     
    binaryOperationKey(BYTE, FLOAT, "times", Pair({ a, b -> a.times(b) }, emptyFun )),     
    binaryOperationKey(BYTE, INT, "times", Pair({ a, b -> a.times(b) }, { a, b -> a.multiply(b) } )),     
    binaryOperationKey(BYTE, LONG, "times", Pair({ a, b -> a.times(b) }, { a, b -> a.multiply(b) } )),     
    binaryOperationKey(BYTE, SHORT, "times", Pair({ a, b -> a.times(b) }, { a, b -> a.multiply(b) } )),     
    binaryOperationKey(BYTE, ANY, "equals", Pair({ a, b -> a.equals(b) }, emptyFun )),     
    binaryOperationKey(CHAR, BYTE, "minus", Pair({ a, b -> a.minus(b) }, emptyFun )),     
    binaryOperationKey(CHAR, CHAR, "minus", Pair({ a, b -> a.minus(b) }, emptyFun )),     
    binaryOperationKey(CHAR, DOUBLE, "minus", Pair({ a, b -> a.minus(b) }, emptyFun )),     
    binaryOperationKey(CHAR, FLOAT, "minus", Pair({ a, b -> a.minus(b) }, emptyFun )),     
    binaryOperationKey(CHAR, INT, "minus", Pair({ a, b -> a.minus(b) }, emptyFun )),     
    binaryOperationKey(CHAR, LONG, "minus", Pair({ a, b -> a.minus(b) }, emptyFun )),     
    binaryOperationKey(CHAR, SHORT, "minus", Pair({ a, b -> a.minus(b) }, emptyFun )),     
    binaryOperationKey(CHAR, BYTE, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(CHAR, CHAR, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(CHAR, DOUBLE, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(CHAR, FLOAT, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(CHAR, INT, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(CHAR, LONG, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(CHAR, SHORT, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(CHAR, BYTE, "plus", Pair({ a, b -> a.plus(b) }, emptyFun )),     
    binaryOperationKey(CHAR, DOUBLE, "plus", Pair({ a, b -> a.plus(b) }, emptyFun )),     
    binaryOperationKey(CHAR, FLOAT, "plus", Pair({ a, b -> a.plus(b) }, emptyFun )),     
    binaryOperationKey(CHAR, INT, "plus", Pair({ a, b -> a.plus(b) }, emptyFun )),     
    binaryOperationKey(CHAR, LONG, "plus", Pair({ a, b -> a.plus(b) }, emptyFun )),     
    binaryOperationKey(CHAR, SHORT, "plus", Pair({ a, b -> a.plus(b) }, emptyFun )),     
    binaryOperationKey(CHAR, BYTE, "div", Pair({ a, b -> a.div(b) }, emptyFun )),     
    binaryOperationKey(CHAR, DOUBLE, "div", Pair({ a, b -> a.div(b) }, emptyFun )),     
    binaryOperationKey(CHAR, FLOAT, "div", Pair({ a, b -> a.div(b) }, emptyFun )),     
    binaryOperationKey(CHAR, INT, "div", Pair({ a, b -> a.div(b) }, emptyFun )),     
    binaryOperationKey(CHAR, LONG, "div", Pair({ a, b -> a.div(b) }, emptyFun )),     
    binaryOperationKey(CHAR, SHORT, "div", Pair({ a, b -> a.div(b) }, emptyFun )),     
    binaryOperationKey(CHAR, BYTE, "mod", Pair({ a, b -> a.mod(b) }, emptyFun )),     
    binaryOperationKey(CHAR, DOUBLE, "mod", Pair({ a, b -> a.mod(b) }, emptyFun )),     
    binaryOperationKey(CHAR, FLOAT, "mod", Pair({ a, b -> a.mod(b) }, emptyFun )),     
    binaryOperationKey(CHAR, INT, "mod", Pair({ a, b -> a.mod(b) }, emptyFun )),     
    binaryOperationKey(CHAR, LONG, "mod", Pair({ a, b -> a.mod(b) }, emptyFun )),     
    binaryOperationKey(CHAR, SHORT, "mod", Pair({ a, b -> a.mod(b) }, emptyFun )),     
    binaryOperationKey(CHAR, BYTE, "times", Pair({ a, b -> a.times(b) }, emptyFun )),     
    binaryOperationKey(CHAR, DOUBLE, "times", Pair({ a, b -> a.times(b) }, emptyFun )),     
    binaryOperationKey(CHAR, FLOAT, "times", Pair({ a, b -> a.times(b) }, emptyFun )),     
    binaryOperationKey(CHAR, INT, "times", Pair({ a, b -> a.times(b) }, emptyFun )),     
    binaryOperationKey(CHAR, LONG, "times", Pair({ a, b -> a.times(b) }, emptyFun )),     
    binaryOperationKey(CHAR, SHORT, "times", Pair({ a, b -> a.times(b) }, emptyFun )),     
    binaryOperationKey(CHAR, ANY, "equals", Pair({ a, b -> a.equals(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, BYTE, "minus", Pair({ a, b -> a.minus(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, CHAR, "minus", Pair({ a, b -> a.minus(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, DOUBLE, "minus", Pair({ a, b -> a.minus(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, FLOAT, "minus", Pair({ a, b -> a.minus(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, INT, "minus", Pair({ a, b -> a.minus(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, LONG, "minus", Pair({ a, b -> a.minus(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, SHORT, "minus", Pair({ a, b -> a.minus(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, BYTE, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, CHAR, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, DOUBLE, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, FLOAT, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, INT, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, LONG, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, SHORT, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, BYTE, "plus", Pair({ a, b -> a.plus(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, CHAR, "plus", Pair({ a, b -> a.plus(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, DOUBLE, "plus", Pair({ a, b -> a.plus(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, FLOAT, "plus", Pair({ a, b -> a.plus(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, INT, "plus", Pair({ a, b -> a.plus(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, LONG, "plus", Pair({ a, b -> a.plus(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, SHORT, "plus", Pair({ a, b -> a.plus(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, BYTE, "div", Pair({ a, b -> a.div(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, CHAR, "div", Pair({ a, b -> a.div(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, DOUBLE, "div", Pair({ a, b -> a.div(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, FLOAT, "div", Pair({ a, b -> a.div(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, INT, "div", Pair({ a, b -> a.div(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, LONG, "div", Pair({ a, b -> a.div(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, SHORT, "div", Pair({ a, b -> a.div(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, BYTE, "mod", Pair({ a, b -> a.mod(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, DOUBLE, "mod", Pair({ a, b -> a.mod(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, FLOAT, "mod", Pair({ a, b -> a.mod(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, INT, "mod", Pair({ a, b -> a.mod(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, LONG, "mod", Pair({ a, b -> a.mod(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, SHORT, "mod", Pair({ a, b -> a.mod(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, BYTE, "times", Pair({ a, b -> a.times(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, CHAR, "times", Pair({ a, b -> a.times(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, DOUBLE, "times", Pair({ a, b -> a.times(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, FLOAT, "times", Pair({ a, b -> a.times(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, INT, "times", Pair({ a, b -> a.times(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, LONG, "times", Pair({ a, b -> a.times(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, SHORT, "times", Pair({ a, b -> a.times(b) }, emptyFun )),     
    binaryOperationKey(DOUBLE, ANY, "equals", Pair({ a, b -> a.equals(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, BYTE, "minus", Pair({ a, b -> a.minus(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, CHAR, "minus", Pair({ a, b -> a.minus(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, DOUBLE, "minus", Pair({ a, b -> a.minus(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, FLOAT, "minus", Pair({ a, b -> a.minus(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, INT, "minus", Pair({ a, b -> a.minus(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, LONG, "minus", Pair({ a, b -> a.minus(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, SHORT, "minus", Pair({ a, b -> a.minus(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, BYTE, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, CHAR, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, DOUBLE, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, FLOAT, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, INT, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, LONG, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, SHORT, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, BYTE, "plus", Pair({ a, b -> a.plus(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, CHAR, "plus", Pair({ a, b -> a.plus(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, DOUBLE, "plus", Pair({ a, b -> a.plus(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, FLOAT, "plus", Pair({ a, b -> a.plus(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, INT, "plus", Pair({ a, b -> a.plus(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, LONG, "plus", Pair({ a, b -> a.plus(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, SHORT, "plus", Pair({ a, b -> a.plus(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, BYTE, "div", Pair({ a, b -> a.div(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, CHAR, "div", Pair({ a, b -> a.div(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, DOUBLE, "div", Pair({ a, b -> a.div(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, FLOAT, "div", Pair({ a, b -> a.div(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, INT, "div", Pair({ a, b -> a.div(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, LONG, "div", Pair({ a, b -> a.div(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, SHORT, "div", Pair({ a, b -> a.div(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, BYTE, "mod", Pair({ a, b -> a.mod(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, CHAR, "mod", Pair({ a, b -> a.mod(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, DOUBLE, "mod", Pair({ a, b -> a.mod(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, FLOAT, "mod", Pair({ a, b -> a.mod(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, INT, "mod", Pair({ a, b -> a.mod(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, LONG, "mod", Pair({ a, b -> a.mod(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, SHORT, "mod", Pair({ a, b -> a.mod(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, BYTE, "times", Pair({ a, b -> a.times(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, CHAR, "times", Pair({ a, b -> a.times(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, DOUBLE, "times", Pair({ a, b -> a.times(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, FLOAT, "times", Pair({ a, b -> a.times(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, INT, "times", Pair({ a, b -> a.times(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, LONG, "times", Pair({ a, b -> a.times(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, SHORT, "times", Pair({ a, b -> a.times(b) }, emptyFun )),     
    binaryOperationKey(FLOAT, ANY, "equals", Pair({ a, b -> a.equals(b) }, emptyFun )),     
    binaryOperationKey(INT, BYTE, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(INT, CHAR, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(INT, DOUBLE, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(INT, FLOAT, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(INT, INT, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(INT, LONG, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(INT, SHORT, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(INT, BYTE, "plus", Pair({ a, b -> a.plus(b) }, { a, b -> a.add(b) } )),     
    binaryOperationKey(INT, CHAR, "plus", Pair({ a, b -> a.plus(b) }, emptyFun )),     
    binaryOperationKey(INT, DOUBLE, "plus", Pair({ a, b -> a.plus(b) }, emptyFun )),     
    binaryOperationKey(INT, FLOAT, "plus", Pair({ a, b -> a.plus(b) }, emptyFun )),     
    binaryOperationKey(INT, INT, "plus", Pair({ a, b -> a.plus(b) }, { a, b -> a.add(b) } )),     
    binaryOperationKey(INT, LONG, "plus", Pair({ a, b -> a.plus(b) }, { a, b -> a.add(b) } )),     
    binaryOperationKey(INT, SHORT, "plus", Pair({ a, b -> a.plus(b) }, { a, b -> a.add(b) } )),     
    binaryOperationKey(INT, INT, "shl", Pair({ a, b -> a.shl(b) }, emptyFun )),     
    binaryOperationKey(INT, INT, "ushr", Pair({ a, b -> a.ushr(b) }, emptyFun )),     
    binaryOperationKey(INT, BYTE, "div", Pair({ a, b -> a.div(b) }, { a, b -> a.divide(b) } )),     
    binaryOperationKey(INT, CHAR, "div", Pair({ a, b -> a.div(b) }, emptyFun )),     
    binaryOperationKey(INT, DOUBLE, "div", Pair({ a, b -> a.div(b) }, emptyFun )),     
    binaryOperationKey(INT, FLOAT, "div", Pair({ a, b -> a.div(b) }, emptyFun )),     
    binaryOperationKey(INT, INT, "div", Pair({ a, b -> a.div(b) }, { a, b -> a.divide(b) } )),     
    binaryOperationKey(INT, LONG, "div", Pair({ a, b -> a.div(b) }, { a, b -> a.divide(b) } )),     
    binaryOperationKey(INT, SHORT, "div", Pair({ a, b -> a.div(b) }, { a, b -> a.divide(b) } )),     
    binaryOperationKey(INT, INT, "shr", Pair({ a, b -> a.shr(b) }, emptyFun )),     
    binaryOperationKey(INT, BYTE, "mod", Pair({ a, b -> a.mod(b) }, { a, b -> a.mod(b) } )),     
    binaryOperationKey(INT, CHAR, "mod", Pair({ a, b -> a.mod(b) }, emptyFun )),     
    binaryOperationKey(INT, DOUBLE, "mod", Pair({ a, b -> a.mod(b) }, emptyFun )),     
    binaryOperationKey(INT, FLOAT, "mod", Pair({ a, b -> a.mod(b) }, emptyFun )),     
    binaryOperationKey(INT, INT, "mod", Pair({ a, b -> a.mod(b) }, { a, b -> a.mod(b) } )),     
    binaryOperationKey(INT, LONG, "mod", Pair({ a, b -> a.mod(b) }, { a, b -> a.mod(b) } )),     
    binaryOperationKey(INT, SHORT, "mod", Pair({ a, b -> a.mod(b) }, { a, b -> a.mod(b) } )),     
    binaryOperationKey(INT, BYTE, "times", Pair({ a, b -> a.times(b) }, { a, b -> a.multiply(b) } )),     
    binaryOperationKey(INT, CHAR, "times", Pair({ a, b -> a.times(b) }, emptyFun )),     
    binaryOperationKey(INT, DOUBLE, "times", Pair({ a, b -> a.times(b) }, emptyFun )),     
    binaryOperationKey(INT, FLOAT, "times", Pair({ a, b -> a.times(b) }, emptyFun )),     
    binaryOperationKey(INT, INT, "times", Pair({ a, b -> a.times(b) }, { a, b -> a.multiply(b) } )),     
    binaryOperationKey(INT, LONG, "times", Pair({ a, b -> a.times(b) }, { a, b -> a.multiply(b) } )),     
    binaryOperationKey(INT, SHORT, "times", Pair({ a, b -> a.times(b) }, { a, b -> a.multiply(b) } )),     
    binaryOperationKey(INT, INT, "or", Pair({ a, b -> a.or(b) }, emptyFun )),     
    binaryOperationKey(INT, BYTE, "minus", Pair({ a, b -> a.minus(b) }, { a, b -> a.subtract(b) } )),     
    binaryOperationKey(INT, CHAR, "minus", Pair({ a, b -> a.minus(b) }, emptyFun )),     
    binaryOperationKey(INT, DOUBLE, "minus", Pair({ a, b -> a.minus(b) }, emptyFun )),     
    binaryOperationKey(INT, FLOAT, "minus", Pair({ a, b -> a.minus(b) }, emptyFun )),     
    binaryOperationKey(INT, INT, "minus", Pair({ a, b -> a.minus(b) }, { a, b -> a.subtract(b) } )),     
    binaryOperationKey(INT, LONG, "minus", Pair({ a, b -> a.minus(b) }, { a, b -> a.subtract(b) } )),     
    binaryOperationKey(INT, SHORT, "minus", Pair({ a, b -> a.minus(b) }, { a, b -> a.subtract(b) } )),     
    binaryOperationKey(INT, INT, "and", Pair({ a, b -> a.and(b) }, emptyFun )),     
    binaryOperationKey(INT, INT, "xor", Pair({ a, b -> a.xor(b) }, emptyFun )),     
    binaryOperationKey(INT, ANY, "equals", Pair({ a, b -> a.equals(b) }, emptyFun )),     
    binaryOperationKey(LONG, BYTE, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(LONG, CHAR, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(LONG, DOUBLE, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(LONG, FLOAT, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(LONG, INT, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(LONG, LONG, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(LONG, SHORT, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(LONG, BYTE, "plus", Pair({ a, b -> a.plus(b) }, { a, b -> a.add(b) } )),     
    binaryOperationKey(LONG, CHAR, "plus", Pair({ a, b -> a.plus(b) }, emptyFun )),     
    binaryOperationKey(LONG, DOUBLE, "plus", Pair({ a, b -> a.plus(b) }, emptyFun )),     
    binaryOperationKey(LONG, FLOAT, "plus", Pair({ a, b -> a.plus(b) }, emptyFun )),     
    binaryOperationKey(LONG, INT, "plus", Pair({ a, b -> a.plus(b) }, { a, b -> a.add(b) } )),     
    binaryOperationKey(LONG, LONG, "plus", Pair({ a, b -> a.plus(b) }, { a, b -> a.add(b) } )),     
    binaryOperationKey(LONG, SHORT, "plus", Pair({ a, b -> a.plus(b) }, { a, b -> a.add(b) } )),     
    binaryOperationKey(LONG, INT, "shl", Pair({ a, b -> a.shl(b) }, emptyFun )),     
    binaryOperationKey(LONG, INT, "ushr", Pair({ a, b -> a.ushr(b) }, emptyFun )),     
    binaryOperationKey(LONG, BYTE, "div", Pair({ a, b -> a.div(b) }, { a, b -> a.divide(b) } )),     
    binaryOperationKey(LONG, CHAR, "div", Pair({ a, b -> a.div(b) }, emptyFun )),     
    binaryOperationKey(LONG, DOUBLE, "div", Pair({ a, b -> a.div(b) }, emptyFun )),     
    binaryOperationKey(LONG, FLOAT, "div", Pair({ a, b -> a.div(b) }, emptyFun )),     
    binaryOperationKey(LONG, INT, "div", Pair({ a, b -> a.div(b) }, { a, b -> a.divide(b) } )),     
    binaryOperationKey(LONG, LONG, "div", Pair({ a, b -> a.div(b) }, { a, b -> a.divide(b) } )),     
    binaryOperationKey(LONG, SHORT, "div", Pair({ a, b -> a.div(b) }, { a, b -> a.divide(b) } )),     
    binaryOperationKey(LONG, INT, "shr", Pair({ a, b -> a.shr(b) }, emptyFun )),     
    binaryOperationKey(LONG, BYTE, "mod", Pair({ a, b -> a.mod(b) }, { a, b -> a.mod(b) } )),     
    binaryOperationKey(LONG, CHAR, "mod", Pair({ a, b -> a.mod(b) }, emptyFun )),     
    binaryOperationKey(LONG, DOUBLE, "mod", Pair({ a, b -> a.mod(b) }, emptyFun )),     
    binaryOperationKey(LONG, FLOAT, "mod", Pair({ a, b -> a.mod(b) }, emptyFun )),     
    binaryOperationKey(LONG, INT, "mod", Pair({ a, b -> a.mod(b) }, { a, b -> a.mod(b) } )),     
    binaryOperationKey(LONG, LONG, "mod", Pair({ a, b -> a.mod(b) }, { a, b -> a.mod(b) } )),     
    binaryOperationKey(LONG, SHORT, "mod", Pair({ a, b -> a.mod(b) }, { a, b -> a.mod(b) } )),     
    binaryOperationKey(LONG, BYTE, "times", Pair({ a, b -> a.times(b) }, { a, b -> a.multiply(b) } )),     
    binaryOperationKey(LONG, CHAR, "times", Pair({ a, b -> a.times(b) }, emptyFun )),     
    binaryOperationKey(LONG, DOUBLE, "times", Pair({ a, b -> a.times(b) }, emptyFun )),     
    binaryOperationKey(LONG, FLOAT, "times", Pair({ a, b -> a.times(b) }, emptyFun )),     
    binaryOperationKey(LONG, INT, "times", Pair({ a, b -> a.times(b) }, { a, b -> a.multiply(b) } )),     
    binaryOperationKey(LONG, LONG, "times", Pair({ a, b -> a.times(b) }, { a, b -> a.multiply(b) } )),     
    binaryOperationKey(LONG, SHORT, "times", Pair({ a, b -> a.times(b) }, { a, b -> a.multiply(b) } )),     
    binaryOperationKey(LONG, LONG, "or", Pair({ a, b -> a.or(b) }, emptyFun )),     
    binaryOperationKey(LONG, BYTE, "minus", Pair({ a, b -> a.minus(b) }, { a, b -> a.subtract(b) } )),     
    binaryOperationKey(LONG, CHAR, "minus", Pair({ a, b -> a.minus(b) }, emptyFun )),     
    binaryOperationKey(LONG, DOUBLE, "minus", Pair({ a, b -> a.minus(b) }, emptyFun )),     
    binaryOperationKey(LONG, FLOAT, "minus", Pair({ a, b -> a.minus(b) }, emptyFun )),     
    binaryOperationKey(LONG, INT, "minus", Pair({ a, b -> a.minus(b) }, { a, b -> a.subtract(b) } )),     
    binaryOperationKey(LONG, LONG, "minus", Pair({ a, b -> a.minus(b) }, { a, b -> a.subtract(b) } )),     
    binaryOperationKey(LONG, SHORT, "minus", Pair({ a, b -> a.minus(b) }, { a, b -> a.subtract(b) } )),     
    binaryOperationKey(LONG, LONG, "and", Pair({ a, b -> a.and(b) }, emptyFun )),     
    binaryOperationKey(LONG, LONG, "xor", Pair({ a, b -> a.xor(b) }, emptyFun )),     
    binaryOperationKey(LONG, ANY, "equals", Pair({ a, b -> a.equals(b) }, emptyFun )),     
    binaryOperationKey(SHORT, BYTE, "minus", Pair({ a, b -> a.minus(b) }, { a, b -> a.subtract(b) } )),     
    binaryOperationKey(SHORT, CHAR, "minus", Pair({ a, b -> a.minus(b) }, emptyFun )),     
    binaryOperationKey(SHORT, DOUBLE, "minus", Pair({ a, b -> a.minus(b) }, emptyFun )),     
    binaryOperationKey(SHORT, FLOAT, "minus", Pair({ a, b -> a.minus(b) }, emptyFun )),     
    binaryOperationKey(SHORT, INT, "minus", Pair({ a, b -> a.minus(b) }, { a, b -> a.subtract(b) } )),     
    binaryOperationKey(SHORT, LONG, "minus", Pair({ a, b -> a.minus(b) }, { a, b -> a.subtract(b) } )),     
    binaryOperationKey(SHORT, SHORT, "minus", Pair({ a, b -> a.minus(b) }, { a, b -> a.subtract(b) } )),     
    binaryOperationKey(SHORT, BYTE, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(SHORT, CHAR, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(SHORT, DOUBLE, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(SHORT, FLOAT, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(SHORT, INT, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(SHORT, LONG, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(SHORT, SHORT, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun )),     
    binaryOperationKey(SHORT, BYTE, "plus", Pair({ a, b -> a.plus(b) }, { a, b -> a.add(b) } )),     
    binaryOperationKey(SHORT, CHAR, "plus", Pair({ a, b -> a.plus(b) }, emptyFun )),     
    binaryOperationKey(SHORT, DOUBLE, "plus", Pair({ a, b -> a.plus(b) }, emptyFun )),     
    binaryOperationKey(SHORT, FLOAT, "plus", Pair({ a, b -> a.plus(b) }, emptyFun )),     
    binaryOperationKey(SHORT, INT, "plus", Pair({ a, b -> a.plus(b) }, { a, b -> a.add(b) } )),     
    binaryOperationKey(SHORT, LONG, "plus", Pair({ a, b -> a.plus(b) }, { a, b -> a.add(b) } )),     
    binaryOperationKey(SHORT, SHORT, "plus", Pair({ a, b -> a.plus(b) }, { a, b -> a.add(b) } )),     
    binaryOperationKey(SHORT, BYTE, "div", Pair({ a, b -> a.div(b) }, { a, b -> a.divide(b) } )),     
    binaryOperationKey(SHORT, CHAR, "div", Pair({ a, b -> a.div(b) }, emptyFun )),     
    binaryOperationKey(SHORT, DOUBLE, "div", Pair({ a, b -> a.div(b) }, emptyFun )),     
    binaryOperationKey(SHORT, FLOAT, "div", Pair({ a, b -> a.div(b) }, emptyFun )),     
    binaryOperationKey(SHORT, INT, "div", Pair({ a, b -> a.div(b) }, { a, b -> a.divide(b) } )),     
    binaryOperationKey(SHORT, LONG, "div", Pair({ a, b -> a.div(b) }, { a, b -> a.divide(b) } )),     
    binaryOperationKey(SHORT, SHORT, "div", Pair({ a, b -> a.div(b) }, { a, b -> a.divide(b) } )),     
    binaryOperationKey(SHORT, BYTE, "mod", Pair({ a, b -> a.mod(b) }, { a, b -> a.mod(b) } )),     
    binaryOperationKey(SHORT, CHAR, "mod", Pair({ a, b -> a.mod(b) }, emptyFun )),     
    binaryOperationKey(SHORT, DOUBLE, "mod", Pair({ a, b -> a.mod(b) }, emptyFun )),     
    binaryOperationKey(SHORT, FLOAT, "mod", Pair({ a, b -> a.mod(b) }, emptyFun )),     
    binaryOperationKey(SHORT, INT, "mod", Pair({ a, b -> a.mod(b) }, { a, b -> a.mod(b) } )),     
    binaryOperationKey(SHORT, LONG, "mod", Pair({ a, b -> a.mod(b) }, { a, b -> a.mod(b) } )),     
    binaryOperationKey(SHORT, SHORT, "mod", Pair({ a, b -> a.mod(b) }, { a, b -> a.mod(b) } )),     
    binaryOperationKey(SHORT, BYTE, "times", Pair({ a, b -> a.times(b) }, { a, b -> a.multiply(b) } )),     
    binaryOperationKey(SHORT, CHAR, "times", Pair({ a, b -> a.times(b) }, emptyFun )),     
    binaryOperationKey(SHORT, DOUBLE, "times", Pair({ a, b -> a.times(b) }, emptyFun )),     
    binaryOperationKey(SHORT, FLOAT, "times", Pair({ a, b -> a.times(b) }, emptyFun )),     
    binaryOperationKey(SHORT, INT, "times", Pair({ a, b -> a.times(b) }, { a, b -> a.multiply(b) } )),     
    binaryOperationKey(SHORT, LONG, "times", Pair({ a, b -> a.times(b) }, { a, b -> a.multiply(b) } )),     
    binaryOperationKey(SHORT, SHORT, "times", Pair({ a, b -> a.times(b) }, { a, b -> a.multiply(b) } )),     
    binaryOperationKey(SHORT, ANY, "equals", Pair({ a, b -> a.equals(b) }, emptyFun )),     
    binaryOperationKey(STRING, ANY, "plus", Pair({ a, b -> a.plus(b) }, emptyFun )),     
    binaryOperationKey(STRING, INT, "get", Pair({ a, b -> a.get(b) }, emptyFun )),     
    binaryOperationKey(STRING, ANY, "equals", Pair({ a, b -> a.equals(b) }, emptyFun )),     
    binaryOperationKey(STRING, STRING, "compareTo", Pair({ a, b -> a.compareTo(b) }, emptyFun ))    
)
