/*
 * Copyright 2010-2013 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.lang.evaluate

/** This file is generated by org.jetbrains.jet.generators.evaluate:generate(). DO NOT MODIFY MANUALLY */

private val unaryOperations = hashMapOf<UnaryOperationKey<*>, (Any?) -> Any>(
    uOp(BOOLEAN, "not", { a -> a.not() }),     
    uOp(BYTE, "toInt", { a -> a.toInt() }),     
    uOp(BYTE, "minus", { a -> a.minus() }),     
    uOp(BYTE, "toChar", { a -> a.toChar() }),     
    uOp(BYTE, "toLong", { a -> a.toLong() }),     
    uOp(BYTE, "plus", { a -> a.plus() }),     
    uOp(BYTE, "toFloat", { a -> a.toFloat() }),     
    uOp(BYTE, "toDouble", { a -> a.toDouble() }),     
    uOp(BYTE, "toShort", { a -> a.toShort() }),     
    uOp(BYTE, "toByte", { a -> a.toByte() }),     
    uOp(CHAR, "toInt", { a -> a.toInt() }),     
    uOp(CHAR, "minus", { a -> a.minus() }),     
    uOp(CHAR, "toChar", { a -> a.toChar() }),     
    uOp(CHAR, "toLong", { a -> a.toLong() }),     
    uOp(CHAR, "plus", { a -> a.plus() }),     
    uOp(CHAR, "toFloat", { a -> a.toFloat() }),     
    uOp(CHAR, "toDouble", { a -> a.toDouble() }),     
    uOp(CHAR, "toShort", { a -> a.toShort() }),     
    uOp(CHAR, "toByte", { a -> a.toByte() }),     
    uOp(DOUBLE, "toInt", { a -> a.toInt() }),     
    uOp(DOUBLE, "minus", { a -> a.minus() }),     
    uOp(DOUBLE, "toChar", { a -> a.toChar() }),     
    uOp(DOUBLE, "toLong", { a -> a.toLong() }),     
    uOp(DOUBLE, "plus", { a -> a.plus() }),     
    uOp(DOUBLE, "toFloat", { a -> a.toFloat() }),     
    uOp(DOUBLE, "toDouble", { a -> a.toDouble() }),     
    uOp(DOUBLE, "toShort", { a -> a.toShort() }),     
    uOp(DOUBLE, "toByte", { a -> a.toByte() }),     
    uOp(FLOAT, "toInt", { a -> a.toInt() }),     
    uOp(FLOAT, "minus", { a -> a.minus() }),     
    uOp(FLOAT, "toChar", { a -> a.toChar() }),     
    uOp(FLOAT, "toLong", { a -> a.toLong() }),     
    uOp(FLOAT, "plus", { a -> a.plus() }),     
    uOp(FLOAT, "toFloat", { a -> a.toFloat() }),     
    uOp(FLOAT, "toDouble", { a -> a.toDouble() }),     
    uOp(FLOAT, "toShort", { a -> a.toShort() }),     
    uOp(FLOAT, "toByte", { a -> a.toByte() }),     
    uOp(INT, "plus", { a -> a.plus() }),     
    uOp(INT, "toShort", { a -> a.toShort() }),     
    uOp(INT, "toByte", { a -> a.toByte() }),     
    uOp(INT, "inv", { a -> a.inv() }),     
    uOp(INT, "toInt", { a -> a.toInt() }),     
    uOp(INT, "minus", { a -> a.minus() }),     
    uOp(INT, "toChar", { a -> a.toChar() }),     
    uOp(INT, "toLong", { a -> a.toLong() }),     
    uOp(INT, "toDouble", { a -> a.toDouble() }),     
    uOp(INT, "toFloat", { a -> a.toFloat() }),     
    uOp(LONG, "plus", { a -> a.plus() }),     
    uOp(LONG, "toShort", { a -> a.toShort() }),     
    uOp(LONG, "toByte", { a -> a.toByte() }),     
    uOp(LONG, "inv", { a -> a.inv() }),     
    uOp(LONG, "toInt", { a -> a.toInt() }),     
    uOp(LONG, "minus", { a -> a.minus() }),     
    uOp(LONG, "toChar", { a -> a.toChar() }),     
    uOp(LONG, "toLong", { a -> a.toLong() }),     
    uOp(LONG, "toDouble", { a -> a.toDouble() }),     
    uOp(LONG, "toFloat", { a -> a.toFloat() }),     
    uOp(SHORT, "toInt", { a -> a.toInt() }),     
    uOp(SHORT, "minus", { a -> a.minus() }),     
    uOp(SHORT, "toChar", { a -> a.toChar() }),     
    uOp(SHORT, "toLong", { a -> a.toLong() }),     
    uOp(SHORT, "plus", { a -> a.plus() }),     
    uOp(SHORT, "toFloat", { a -> a.toFloat() }),     
    uOp(SHORT, "toDouble", { a -> a.toDouble() }),     
    uOp(SHORT, "toShort", { a -> a.toShort() }),     
    uOp(SHORT, "toByte", { a -> a.toByte() }),     
    uOp(STRING, "toString", { a -> a.toString() })    
)

private val binaryOperations = hashMapOf<BinaryOperationKey<*, *>, (Any?, Any?) -> Any>(
    bOp(BOOLEAN, BOOLEAN, "xor", { a, b -> a.xor(b) }),     
    bOp(BOOLEAN, BOOLEAN, "or", { a, b -> a.or(b) }),     
    bOp(BOOLEAN, ANY, "equals", { a, b -> a.equals(b) }),     
    bOp(BOOLEAN, BOOLEAN, "and", { a, b -> a.and(b) }),     
    bOp(BYTE, BYTE, "minus", { a, b -> a.minus(b) }),     
    bOp(BYTE, CHAR, "minus", { a, b -> a.minus(b) }),     
    bOp(BYTE, DOUBLE, "minus", { a, b -> a.minus(b) }),     
    bOp(BYTE, FLOAT, "minus", { a, b -> a.minus(b) }),     
    bOp(BYTE, INT, "minus", { a, b -> a.minus(b) }),     
    bOp(BYTE, LONG, "minus", { a, b -> a.minus(b) }),     
    bOp(BYTE, SHORT, "minus", { a, b -> a.minus(b) }),     
    bOp(BYTE, BYTE, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(BYTE, CHAR, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(BYTE, DOUBLE, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(BYTE, FLOAT, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(BYTE, INT, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(BYTE, LONG, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(BYTE, SHORT, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(BYTE, BYTE, "plus", { a, b -> a.plus(b) }),     
    bOp(BYTE, CHAR, "plus", { a, b -> a.plus(b) }),     
    bOp(BYTE, DOUBLE, "plus", { a, b -> a.plus(b) }),     
    bOp(BYTE, FLOAT, "plus", { a, b -> a.plus(b) }),     
    bOp(BYTE, INT, "plus", { a, b -> a.plus(b) }),     
    bOp(BYTE, LONG, "plus", { a, b -> a.plus(b) }),     
    bOp(BYTE, SHORT, "plus", { a, b -> a.plus(b) }),     
    bOp(BYTE, BYTE, "div", { a, b -> a.div(b) }),     
    bOp(BYTE, CHAR, "div", { a, b -> a.div(b) }),     
    bOp(BYTE, DOUBLE, "div", { a, b -> a.div(b) }),     
    bOp(BYTE, FLOAT, "div", { a, b -> a.div(b) }),     
    bOp(BYTE, INT, "div", { a, b -> a.div(b) }),     
    bOp(BYTE, LONG, "div", { a, b -> a.div(b) }),     
    bOp(BYTE, SHORT, "div", { a, b -> a.div(b) }),     
    bOp(BYTE, BYTE, "mod", { a, b -> a.mod(b) }),     
    bOp(BYTE, CHAR, "mod", { a, b -> a.mod(b) }),     
    bOp(BYTE, DOUBLE, "mod", { a, b -> a.mod(b) }),     
    bOp(BYTE, FLOAT, "mod", { a, b -> a.mod(b) }),     
    bOp(BYTE, INT, "mod", { a, b -> a.mod(b) }),     
    bOp(BYTE, LONG, "mod", { a, b -> a.mod(b) }),     
    bOp(BYTE, SHORT, "mod", { a, b -> a.mod(b) }),     
    bOp(BYTE, BYTE, "times", { a, b -> a.times(b) }),     
    bOp(BYTE, CHAR, "times", { a, b -> a.times(b) }),     
    bOp(BYTE, DOUBLE, "times", { a, b -> a.times(b) }),     
    bOp(BYTE, FLOAT, "times", { a, b -> a.times(b) }),     
    bOp(BYTE, INT, "times", { a, b -> a.times(b) }),     
    bOp(BYTE, LONG, "times", { a, b -> a.times(b) }),     
    bOp(BYTE, SHORT, "times", { a, b -> a.times(b) }),     
    bOp(BYTE, ANY, "equals", { a, b -> a.equals(b) }),     
    bOp(CHAR, BYTE, "minus", { a, b -> a.minus(b) }),     
    bOp(CHAR, CHAR, "minus", { a, b -> a.minus(b) }),     
    bOp(CHAR, DOUBLE, "minus", { a, b -> a.minus(b) }),     
    bOp(CHAR, FLOAT, "minus", { a, b -> a.minus(b) }),     
    bOp(CHAR, INT, "minus", { a, b -> a.minus(b) }),     
    bOp(CHAR, LONG, "minus", { a, b -> a.minus(b) }),     
    bOp(CHAR, SHORT, "minus", { a, b -> a.minus(b) }),     
    bOp(CHAR, BYTE, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(CHAR, CHAR, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(CHAR, DOUBLE, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(CHAR, FLOAT, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(CHAR, INT, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(CHAR, LONG, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(CHAR, SHORT, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(CHAR, BYTE, "plus", { a, b -> a.plus(b) }),     
    bOp(CHAR, DOUBLE, "plus", { a, b -> a.plus(b) }),     
    bOp(CHAR, FLOAT, "plus", { a, b -> a.plus(b) }),     
    bOp(CHAR, INT, "plus", { a, b -> a.plus(b) }),     
    bOp(CHAR, LONG, "plus", { a, b -> a.plus(b) }),     
    bOp(CHAR, SHORT, "plus", { a, b -> a.plus(b) }),     
    bOp(CHAR, BYTE, "div", { a, b -> a.div(b) }),     
    bOp(CHAR, DOUBLE, "div", { a, b -> a.div(b) }),     
    bOp(CHAR, FLOAT, "div", { a, b -> a.div(b) }),     
    bOp(CHAR, INT, "div", { a, b -> a.div(b) }),     
    bOp(CHAR, LONG, "div", { a, b -> a.div(b) }),     
    bOp(CHAR, SHORT, "div", { a, b -> a.div(b) }),     
    bOp(CHAR, BYTE, "mod", { a, b -> a.mod(b) }),     
    bOp(CHAR, DOUBLE, "mod", { a, b -> a.mod(b) }),     
    bOp(CHAR, FLOAT, "mod", { a, b -> a.mod(b) }),     
    bOp(CHAR, INT, "mod", { a, b -> a.mod(b) }),     
    bOp(CHAR, LONG, "mod", { a, b -> a.mod(b) }),     
    bOp(CHAR, SHORT, "mod", { a, b -> a.mod(b) }),     
    bOp(CHAR, BYTE, "times", { a, b -> a.times(b) }),     
    bOp(CHAR, DOUBLE, "times", { a, b -> a.times(b) }),     
    bOp(CHAR, FLOAT, "times", { a, b -> a.times(b) }),     
    bOp(CHAR, INT, "times", { a, b -> a.times(b) }),     
    bOp(CHAR, LONG, "times", { a, b -> a.times(b) }),     
    bOp(CHAR, SHORT, "times", { a, b -> a.times(b) }),     
    bOp(CHAR, ANY, "equals", { a, b -> a.equals(b) }),     
    bOp(DOUBLE, BYTE, "minus", { a, b -> a.minus(b) }),     
    bOp(DOUBLE, CHAR, "minus", { a, b -> a.minus(b) }),     
    bOp(DOUBLE, DOUBLE, "minus", { a, b -> a.minus(b) }),     
    bOp(DOUBLE, FLOAT, "minus", { a, b -> a.minus(b) }),     
    bOp(DOUBLE, INT, "minus", { a, b -> a.minus(b) }),     
    bOp(DOUBLE, LONG, "minus", { a, b -> a.minus(b) }),     
    bOp(DOUBLE, SHORT, "minus", { a, b -> a.minus(b) }),     
    bOp(DOUBLE, BYTE, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(DOUBLE, CHAR, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(DOUBLE, DOUBLE, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(DOUBLE, FLOAT, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(DOUBLE, INT, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(DOUBLE, LONG, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(DOUBLE, SHORT, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(DOUBLE, BYTE, "plus", { a, b -> a.plus(b) }),     
    bOp(DOUBLE, CHAR, "plus", { a, b -> a.plus(b) }),     
    bOp(DOUBLE, DOUBLE, "plus", { a, b -> a.plus(b) }),     
    bOp(DOUBLE, FLOAT, "plus", { a, b -> a.plus(b) }),     
    bOp(DOUBLE, INT, "plus", { a, b -> a.plus(b) }),     
    bOp(DOUBLE, LONG, "plus", { a, b -> a.plus(b) }),     
    bOp(DOUBLE, SHORT, "plus", { a, b -> a.plus(b) }),     
    bOp(DOUBLE, BYTE, "div", { a, b -> a.div(b) }),     
    bOp(DOUBLE, CHAR, "div", { a, b -> a.div(b) }),     
    bOp(DOUBLE, DOUBLE, "div", { a, b -> a.div(b) }),     
    bOp(DOUBLE, FLOAT, "div", { a, b -> a.div(b) }),     
    bOp(DOUBLE, INT, "div", { a, b -> a.div(b) }),     
    bOp(DOUBLE, LONG, "div", { a, b -> a.div(b) }),     
    bOp(DOUBLE, SHORT, "div", { a, b -> a.div(b) }),     
    bOp(DOUBLE, BYTE, "mod", { a, b -> a.mod(b) }),     
    bOp(DOUBLE, DOUBLE, "mod", { a, b -> a.mod(b) }),     
    bOp(DOUBLE, FLOAT, "mod", { a, b -> a.mod(b) }),     
    bOp(DOUBLE, INT, "mod", { a, b -> a.mod(b) }),     
    bOp(DOUBLE, LONG, "mod", { a, b -> a.mod(b) }),     
    bOp(DOUBLE, SHORT, "mod", { a, b -> a.mod(b) }),     
    bOp(DOUBLE, BYTE, "times", { a, b -> a.times(b) }),     
    bOp(DOUBLE, CHAR, "times", { a, b -> a.times(b) }),     
    bOp(DOUBLE, DOUBLE, "times", { a, b -> a.times(b) }),     
    bOp(DOUBLE, FLOAT, "times", { a, b -> a.times(b) }),     
    bOp(DOUBLE, INT, "times", { a, b -> a.times(b) }),     
    bOp(DOUBLE, LONG, "times", { a, b -> a.times(b) }),     
    bOp(DOUBLE, SHORT, "times", { a, b -> a.times(b) }),     
    bOp(DOUBLE, ANY, "equals", { a, b -> a.equals(b) }),     
    bOp(FLOAT, BYTE, "minus", { a, b -> a.minus(b) }),     
    bOp(FLOAT, CHAR, "minus", { a, b -> a.minus(b) }),     
    bOp(FLOAT, DOUBLE, "minus", { a, b -> a.minus(b) }),     
    bOp(FLOAT, FLOAT, "minus", { a, b -> a.minus(b) }),     
    bOp(FLOAT, INT, "minus", { a, b -> a.minus(b) }),     
    bOp(FLOAT, LONG, "minus", { a, b -> a.minus(b) }),     
    bOp(FLOAT, SHORT, "minus", { a, b -> a.minus(b) }),     
    bOp(FLOAT, BYTE, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(FLOAT, CHAR, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(FLOAT, DOUBLE, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(FLOAT, FLOAT, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(FLOAT, INT, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(FLOAT, LONG, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(FLOAT, SHORT, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(FLOAT, BYTE, "plus", { a, b -> a.plus(b) }),     
    bOp(FLOAT, CHAR, "plus", { a, b -> a.plus(b) }),     
    bOp(FLOAT, DOUBLE, "plus", { a, b -> a.plus(b) }),     
    bOp(FLOAT, FLOAT, "plus", { a, b -> a.plus(b) }),     
    bOp(FLOAT, INT, "plus", { a, b -> a.plus(b) }),     
    bOp(FLOAT, LONG, "plus", { a, b -> a.plus(b) }),     
    bOp(FLOAT, SHORT, "plus", { a, b -> a.plus(b) }),     
    bOp(FLOAT, BYTE, "div", { a, b -> a.div(b) }),     
    bOp(FLOAT, CHAR, "div", { a, b -> a.div(b) }),     
    bOp(FLOAT, DOUBLE, "div", { a, b -> a.div(b) }),     
    bOp(FLOAT, FLOAT, "div", { a, b -> a.div(b) }),     
    bOp(FLOAT, INT, "div", { a, b -> a.div(b) }),     
    bOp(FLOAT, LONG, "div", { a, b -> a.div(b) }),     
    bOp(FLOAT, SHORT, "div", { a, b -> a.div(b) }),     
    bOp(FLOAT, BYTE, "mod", { a, b -> a.mod(b) }),     
    bOp(FLOAT, CHAR, "mod", { a, b -> a.mod(b) }),     
    bOp(FLOAT, DOUBLE, "mod", { a, b -> a.mod(b) }),     
    bOp(FLOAT, FLOAT, "mod", { a, b -> a.mod(b) }),     
    bOp(FLOAT, INT, "mod", { a, b -> a.mod(b) }),     
    bOp(FLOAT, LONG, "mod", { a, b -> a.mod(b) }),     
    bOp(FLOAT, SHORT, "mod", { a, b -> a.mod(b) }),     
    bOp(FLOAT, BYTE, "times", { a, b -> a.times(b) }),     
    bOp(FLOAT, CHAR, "times", { a, b -> a.times(b) }),     
    bOp(FLOAT, DOUBLE, "times", { a, b -> a.times(b) }),     
    bOp(FLOAT, FLOAT, "times", { a, b -> a.times(b) }),     
    bOp(FLOAT, INT, "times", { a, b -> a.times(b) }),     
    bOp(FLOAT, LONG, "times", { a, b -> a.times(b) }),     
    bOp(FLOAT, SHORT, "times", { a, b -> a.times(b) }),     
    bOp(FLOAT, ANY, "equals", { a, b -> a.equals(b) }),     
    bOp(INT, BYTE, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(INT, CHAR, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(INT, DOUBLE, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(INT, FLOAT, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(INT, INT, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(INT, LONG, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(INT, SHORT, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(INT, BYTE, "plus", { a, b -> a.plus(b) }),     
    bOp(INT, CHAR, "plus", { a, b -> a.plus(b) }),     
    bOp(INT, DOUBLE, "plus", { a, b -> a.plus(b) }),     
    bOp(INT, FLOAT, "plus", { a, b -> a.plus(b) }),     
    bOp(INT, INT, "plus", { a, b -> a.plus(b) }),     
    bOp(INT, LONG, "plus", { a, b -> a.plus(b) }),     
    bOp(INT, SHORT, "plus", { a, b -> a.plus(b) }),     
    bOp(INT, INT, "shl", { a, b -> a.shl(b) }),     
    bOp(INT, INT, "ushr", { a, b -> a.ushr(b) }),     
    bOp(INT, BYTE, "div", { a, b -> a.div(b) }),     
    bOp(INT, CHAR, "div", { a, b -> a.div(b) }),     
    bOp(INT, DOUBLE, "div", { a, b -> a.div(b) }),     
    bOp(INT, FLOAT, "div", { a, b -> a.div(b) }),     
    bOp(INT, INT, "div", { a, b -> a.div(b) }),     
    bOp(INT, LONG, "div", { a, b -> a.div(b) }),     
    bOp(INT, SHORT, "div", { a, b -> a.div(b) }),     
    bOp(INT, INT, "shr", { a, b -> a.shr(b) }),     
    bOp(INT, BYTE, "mod", { a, b -> a.mod(b) }),     
    bOp(INT, CHAR, "mod", { a, b -> a.mod(b) }),     
    bOp(INT, DOUBLE, "mod", { a, b -> a.mod(b) }),     
    bOp(INT, FLOAT, "mod", { a, b -> a.mod(b) }),     
    bOp(INT, INT, "mod", { a, b -> a.mod(b) }),     
    bOp(INT, LONG, "mod", { a, b -> a.mod(b) }),     
    bOp(INT, SHORT, "mod", { a, b -> a.mod(b) }),     
    bOp(INT, BYTE, "times", { a, b -> a.times(b) }),     
    bOp(INT, CHAR, "times", { a, b -> a.times(b) }),     
    bOp(INT, DOUBLE, "times", { a, b -> a.times(b) }),     
    bOp(INT, FLOAT, "times", { a, b -> a.times(b) }),     
    bOp(INT, INT, "times", { a, b -> a.times(b) }),     
    bOp(INT, LONG, "times", { a, b -> a.times(b) }),     
    bOp(INT, SHORT, "times", { a, b -> a.times(b) }),     
    bOp(INT, INT, "or", { a, b -> a.or(b) }),     
    bOp(INT, BYTE, "minus", { a, b -> a.minus(b) }),     
    bOp(INT, CHAR, "minus", { a, b -> a.minus(b) }),     
    bOp(INT, DOUBLE, "minus", { a, b -> a.minus(b) }),     
    bOp(INT, FLOAT, "minus", { a, b -> a.minus(b) }),     
    bOp(INT, INT, "minus", { a, b -> a.minus(b) }),     
    bOp(INT, LONG, "minus", { a, b -> a.minus(b) }),     
    bOp(INT, SHORT, "minus", { a, b -> a.minus(b) }),     
    bOp(INT, INT, "and", { a, b -> a.and(b) }),     
    bOp(INT, INT, "xor", { a, b -> a.xor(b) }),     
    bOp(INT, ANY, "equals", { a, b -> a.equals(b) }),     
    bOp(LONG, BYTE, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(LONG, CHAR, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(LONG, DOUBLE, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(LONG, FLOAT, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(LONG, INT, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(LONG, LONG, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(LONG, SHORT, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(LONG, BYTE, "plus", { a, b -> a.plus(b) }),     
    bOp(LONG, CHAR, "plus", { a, b -> a.plus(b) }),     
    bOp(LONG, DOUBLE, "plus", { a, b -> a.plus(b) }),     
    bOp(LONG, FLOAT, "plus", { a, b -> a.plus(b) }),     
    bOp(LONG, INT, "plus", { a, b -> a.plus(b) }),     
    bOp(LONG, LONG, "plus", { a, b -> a.plus(b) }),     
    bOp(LONG, SHORT, "plus", { a, b -> a.plus(b) }),     
    bOp(LONG, INT, "shl", { a, b -> a.shl(b) }),     
    bOp(LONG, INT, "ushr", { a, b -> a.ushr(b) }),     
    bOp(LONG, BYTE, "div", { a, b -> a.div(b) }),     
    bOp(LONG, CHAR, "div", { a, b -> a.div(b) }),     
    bOp(LONG, DOUBLE, "div", { a, b -> a.div(b) }),     
    bOp(LONG, FLOAT, "div", { a, b -> a.div(b) }),     
    bOp(LONG, INT, "div", { a, b -> a.div(b) }),     
    bOp(LONG, LONG, "div", { a, b -> a.div(b) }),     
    bOp(LONG, SHORT, "div", { a, b -> a.div(b) }),     
    bOp(LONG, INT, "shr", { a, b -> a.shr(b) }),     
    bOp(LONG, BYTE, "mod", { a, b -> a.mod(b) }),     
    bOp(LONG, CHAR, "mod", { a, b -> a.mod(b) }),     
    bOp(LONG, DOUBLE, "mod", { a, b -> a.mod(b) }),     
    bOp(LONG, FLOAT, "mod", { a, b -> a.mod(b) }),     
    bOp(LONG, INT, "mod", { a, b -> a.mod(b) }),     
    bOp(LONG, LONG, "mod", { a, b -> a.mod(b) }),     
    bOp(LONG, SHORT, "mod", { a, b -> a.mod(b) }),     
    bOp(LONG, BYTE, "times", { a, b -> a.times(b) }),     
    bOp(LONG, CHAR, "times", { a, b -> a.times(b) }),     
    bOp(LONG, DOUBLE, "times", { a, b -> a.times(b) }),     
    bOp(LONG, FLOAT, "times", { a, b -> a.times(b) }),     
    bOp(LONG, INT, "times", { a, b -> a.times(b) }),     
    bOp(LONG, LONG, "times", { a, b -> a.times(b) }),     
    bOp(LONG, SHORT, "times", { a, b -> a.times(b) }),     
    bOp(LONG, LONG, "or", { a, b -> a.or(b) }),     
    bOp(LONG, BYTE, "minus", { a, b -> a.minus(b) }),     
    bOp(LONG, CHAR, "minus", { a, b -> a.minus(b) }),     
    bOp(LONG, DOUBLE, "minus", { a, b -> a.minus(b) }),     
    bOp(LONG, FLOAT, "minus", { a, b -> a.minus(b) }),     
    bOp(LONG, INT, "minus", { a, b -> a.minus(b) }),     
    bOp(LONG, LONG, "minus", { a, b -> a.minus(b) }),     
    bOp(LONG, SHORT, "minus", { a, b -> a.minus(b) }),     
    bOp(LONG, LONG, "and", { a, b -> a.and(b) }),     
    bOp(LONG, LONG, "xor", { a, b -> a.xor(b) }),     
    bOp(LONG, ANY, "equals", { a, b -> a.equals(b) }),     
    bOp(SHORT, BYTE, "minus", { a, b -> a.minus(b) }),     
    bOp(SHORT, CHAR, "minus", { a, b -> a.minus(b) }),     
    bOp(SHORT, DOUBLE, "minus", { a, b -> a.minus(b) }),     
    bOp(SHORT, FLOAT, "minus", { a, b -> a.minus(b) }),     
    bOp(SHORT, INT, "minus", { a, b -> a.minus(b) }),     
    bOp(SHORT, LONG, "minus", { a, b -> a.minus(b) }),     
    bOp(SHORT, SHORT, "minus", { a, b -> a.minus(b) }),     
    bOp(SHORT, BYTE, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(SHORT, CHAR, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(SHORT, DOUBLE, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(SHORT, FLOAT, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(SHORT, INT, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(SHORT, LONG, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(SHORT, SHORT, "compareTo", { a, b -> a.compareTo(b) }),     
    bOp(SHORT, BYTE, "plus", { a, b -> a.plus(b) }),     
    bOp(SHORT, CHAR, "plus", { a, b -> a.plus(b) }),     
    bOp(SHORT, DOUBLE, "plus", { a, b -> a.plus(b) }),     
    bOp(SHORT, FLOAT, "plus", { a, b -> a.plus(b) }),     
    bOp(SHORT, INT, "plus", { a, b -> a.plus(b) }),     
    bOp(SHORT, LONG, "plus", { a, b -> a.plus(b) }),     
    bOp(SHORT, SHORT, "plus", { a, b -> a.plus(b) }),     
    bOp(SHORT, BYTE, "div", { a, b -> a.div(b) }),     
    bOp(SHORT, CHAR, "div", { a, b -> a.div(b) }),     
    bOp(SHORT, DOUBLE, "div", { a, b -> a.div(b) }),     
    bOp(SHORT, FLOAT, "div", { a, b -> a.div(b) }),     
    bOp(SHORT, INT, "div", { a, b -> a.div(b) }),     
    bOp(SHORT, LONG, "div", { a, b -> a.div(b) }),     
    bOp(SHORT, SHORT, "div", { a, b -> a.div(b) }),     
    bOp(SHORT, BYTE, "mod", { a, b -> a.mod(b) }),     
    bOp(SHORT, CHAR, "mod", { a, b -> a.mod(b) }),     
    bOp(SHORT, DOUBLE, "mod", { a, b -> a.mod(b) }),     
    bOp(SHORT, FLOAT, "mod", { a, b -> a.mod(b) }),     
    bOp(SHORT, INT, "mod", { a, b -> a.mod(b) }),     
    bOp(SHORT, LONG, "mod", { a, b -> a.mod(b) }),     
    bOp(SHORT, SHORT, "mod", { a, b -> a.mod(b) }),     
    bOp(SHORT, BYTE, "times", { a, b -> a.times(b) }),     
    bOp(SHORT, CHAR, "times", { a, b -> a.times(b) }),     
    bOp(SHORT, DOUBLE, "times", { a, b -> a.times(b) }),     
    bOp(SHORT, FLOAT, "times", { a, b -> a.times(b) }),     
    bOp(SHORT, INT, "times", { a, b -> a.times(b) }),     
    bOp(SHORT, LONG, "times", { a, b -> a.times(b) }),     
    bOp(SHORT, SHORT, "times", { a, b -> a.times(b) }),     
    bOp(SHORT, ANY, "equals", { a, b -> a.equals(b) }),     
    bOp(STRING, ANY, "plus", { a, b -> a.plus(b) }),     
    bOp(STRING, INT, "get", { a, b -> a.get(b) }),     
    bOp(STRING, ANY, "equals", { a, b -> a.equals(b) }),     
    bOp(STRING, STRING, "compareTo", { a, b -> a.compareTo(b) })    
)
